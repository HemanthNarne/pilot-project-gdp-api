{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-user/add-user.component.css","webpack:///./src/app/add-user/add-user.component.html","webpack:///./src/app/add-user/add-user.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/common/dataService.ts","webpack:///./src/app/common/user.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"/* Full-width input fields */\\r\\n/* input[type=text], input[type=password], input[type=date], input[type=email] {\\r\\n    width: 100%;\\r\\n    padding: 15px;\\r\\n    margin: 5px 0 22px 0;\\r\\n    display: inline-block;\\r\\n    border: none;\\r\\n    background: #f1f1f1;\\r\\n}\\r\\n\\r\\ninput[type=text]:focus, input[type=password]:focus, input[type=date]:focus, input[type=email]:focus {\\r\\n    background-color: #ddd;\\r\\n    outline: none;\\r\\n}\\r\\n\\r\\nhr {\\r\\n    border: 1px solid #f1f1f1;\\r\\n    margin-bottom: 25px;\\r\\n} */\\r\\n/* Set a style for all buttons */\\r\\n/* button {\\r\\n    background-color: #4CAF50;\\r\\n    color: white;\\r\\n    padding: 14px 20px;\\r\\n    margin: 8px 0;\\r\\n    border: none;\\r\\n    cursor: pointer;\\r\\n    width: 100%;\\r\\n    opacity: 0.9;\\r\\n}\\r\\n\\r\\nbutton:hover {\\r\\n    opacity:1;\\r\\n} */\\r\\n/* Extra styles for the cancel button */\\r\\n/* .cancelbtn {\\r\\n    padding: 14px 20px;\\r\\n    background-color: #f44336;\\r\\n} */\\r\\n/* Float cancel and signup buttons and add an equal width */\\r\\n/* .cancelbtn, .signupbtn {\\r\\n  float: left;\\r\\n  width: 50%;\\r\\n} */\\r\\n/* Add padding to container elements */\\r\\n/* .container {\\r\\n    padding: 16px;\\r\\n} */\\r\\n/* Clear floats */\\r\\n/* .clearfix::after {\\r\\n    content: \\\"\\\";\\r\\n    clear: both;\\r\\n    display: table;\\r\\n} */\\r\\n/* Change styles for cancel button and signup button on extra small screens */\\r\\n/* @media screen and (max-width: 300px) {\\r\\n    .cancelbtn, .signupbtn {\\r\\n       width: 100%;\\r\\n    }\\r\\n} */\\r\\n/* padding for form */\\r\\n/* .paddingComform {\\r\\n    padding-left: 27em;\\r\\n    padding-right: 27em;\\r\\n    padding-top: 6em;\\r\\n} */\"","module.exports = \"<div class=\\\"custRow row\\\">\\r\\n  <br>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"custRow row\\\">\\r\\n  <div class=\\\"col-md-2 col-xs-2 col-lg-2\\\">\\r\\n    <span></span>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-8 col-xs-8 col-lg-8\\\">\\r\\n\\r\\n    <form novalidate (ngSubmit)=\\\"onFormSubmit(signupForm)\\\" #signupForm=\\\"ngForm\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n      <div class=\\\"container\\\">\\r\\n        <div style=\\\"text-align:center;\\\">\\r\\n          <h1>New User Form</h1>\\r\\n          <p>Please fill in this form to create an User</p>\\r\\n        </div>\\r\\n        <hr>\\r\\n\\r\\n        <label for=\\\"firstName\\\">\\r\\n          <b>First Name</b>\\r\\n        </label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.firstName\\\" name=\\\"firstName\\\" #firstName=\\\"ngModel\\\" id=\\\"inputfirstName\\\"\\r\\n          placeholder=\\\"First Name\\\" required>\\r\\n\\r\\n        <!-- firstName error block -->\\r\\n        <div *ngIf=\\\"(firstName.invalid && ( firstName.touched || firstName.dirty) ) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n          <div *ngIf=\\\"firstName.errors?.required\\\">\\r\\n            Please enter the firstname\\r\\n          </div>\\r\\n        </div>\\r\\n        <label for=\\\"lastName\\\">\\r\\n            <b>Last Name</b>\\r\\n          </label>\\r\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.lastName\\\" name=\\\"lastName\\\" #lastName=\\\"ngModel\\\" id=\\\"inputlastName\\\"\\r\\n            placeholder=\\\"Last Name\\\" required>\\r\\n          <!-- lastName error block -->\\r\\n          <div *ngIf=\\\"(lastName.invalid && ( lastName.touched || lastName.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n            <div *ngIf=\\\"lastName.errors?.required\\\">\\r\\n              Please enter the lastname\\r\\n            </div>\\r\\n          </div>\\r\\n  \\r\\n          <label for=\\\"email\\\">\\r\\n            <b>Email</b>\\r\\n          </label>\\r\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\" id=\\\"inputEmail\\\" placeholder=\\\"Email\\\"\\r\\n            pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required>\\r\\n          <!-- Email error block -->\\r\\n          <div *ngIf=\\\"(email.invalid && ( email.touched || email.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n            <div *ngIf=\\\"email.errors?.required\\\">\\r\\n              Please enter the email id\\r\\n            </div>\\r\\n            <div *ngIf=\\\"email.errors?.pattern &&  email.dirty\\\">\\r\\n                Please enter the valid email id\\r\\n            </div>\\r\\n          </div>\\r\\n  \\r\\n          <!-- Select Password block -->\\r\\n          <label for=\\\"password\\\">\\r\\n            <b>Password</b>\\r\\n          </label>\\r\\n          <input type=\\\"password\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" id=\\\"inputpassword\\\"\\r\\n            placeholder=\\\"Password\\\" minlength=\\\"6\\\" required>\\r\\n          <!-- password error block -->\\r\\n          <div *ngIf=\\\"(password.invalid && ( password.touched || password.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n            <div *ngIf=\\\"password.errors?.required\\\">\\r\\n              Please enter the password\\r\\n            </div>\\r\\n            <div *ngIf=\\\"password.errors?.minlength && password.dirty\\\">\\r\\n                Password must have mininmum 6 characters.\\r\\n            </div>\\r\\n          </div>\\r\\n  \\r\\n          <!-- Select Gender block -->\\r\\n          <label for=\\\"gender\\\">\\r\\n            <b>Gender</b>\\r\\n          </label>\\r\\n          <select id=\\\"select\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.gender\\\" name=\\\"gender\\\" required>\\r\\n            <option *ngFor=\\\"let g of gender\\\" [value]=\\\"g\\\"> {{g}}\\r\\n            </option>\\r\\n          </select>\\r\\n  \\r\\n          <!-- Select Date of Birth block -->\\r\\n          <label for=\\\"dob\\\">\\r\\n            <b>Date of Birth</b>\\r\\n          </label>\\r\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.dob\\\" name=\\\"dob\\\" #dob=\\\"ngModel\\\" id=\\\"inputdob\\\" placeholder=\\\"Select date\\\"\\r\\n            required>\\r\\n          <!-- dob error block -->\\r\\n          <div *ngIf=\\\"(dob.invalid && ( dob.touched || dob.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n            <div *ngIf=\\\"dob.errors?.required\\\">\\r\\n              Please enter the Date of Birth\\r\\n            </div>\\r\\n          </div>\\r\\n  \\r\\n          <!-- Select status block -->\\r\\n          <label for=\\\"status\\\">\\r\\n            <b>Status</b>\\r\\n          </label>\\r\\n          <select id=\\\"status\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.status\\\" name=\\\"status\\\" required>\\r\\n            <option *ngFor=\\\"let s of status\\\" [value]=\\\"s\\\"> {{ s }}\\r\\n            </option>\\r\\n          </select>\\r\\n  \\r\\n       \\r\\n        <br>\\r\\n\\r\\n        <div class=\\\"clearfix\\\">\\r\\n          <button type=\\\"reset\\\" class=\\\"btn btn-danger\\\" routerLink=\\\"/users\\\">Cancel</button>\\r\\n          <!-- <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!signupForm.form.valid\\\"> Submit -->\\r\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"> Submit\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-2 col-xs-2 col-lg-2\\\">\\r\\n    <span></span>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"custRow row\\\">\\r\\n  <br>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../common/user'\nimport { Router } from '@angular/router'\nimport { DataService } from '../common/dataService';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['../app.component.css', './add-user.component.css']\n  // styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  user: User;\n  gender: any[];\n  status: any[];\n  isSubmitted = false\n  constructor(private router: Router, private dataService: DataService) {\n    this.gender = ['Male', 'Female', 'Other'];\n    this.status = ['ACTIVE', 'INACTIVE'];\n    this.user = new User({\n      firstName: '',\n      lastName: '',\n      email: '',\n      gender: this.gender[0],\n      profileImage: '',\n      dob: '',\n      status: this.status[0]\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  stringify(item) {\n    return JSON.stringify(item)\n  }\n\n  onFormSubmit({ value, valid }: { value: User, valid: boolean }) {\n      this.isSubmitted = true\n      this.user = value;\n      // console.log(this.user);\n      // console.log('valid: ' + valid);\n      if(valid){\n        this.user = value;\n      console.log(this.user);\n      console.log('valid: ' + valid);\n      this.dataService.saveUser(this.user)\n      .subscribe((data) =>{\n        console.log(data)\n        console.log(\"success\")\n        this.router.navigate(['/users'])\n      },\n      error=>{\n        console.log(\"Error Occured\")\n      });\n\n \n      }\n      \n   \n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardComponent } from './dashboard/dashboard.component'\r\nimport { LoginComponent } from './login/login.component'\r\nimport { AddUserComponent} from './add-user/add-user.component'\r\n\r\nconst routes: Routes = [\r\n  { path: 'users', component: DashboardComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'addUser', component: AddUserComponent },\r\n  {path : '', redirectTo: \"/login\",pathMatch: 'full'}\r\n  ];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes,{ useHash: true })\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    RouterModule\r\n  ]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"/* body {\\r\\n    font-family: Arial, Helvetica, sans-serif;\\r\\n}\\r\\n* {\\r\\n    box-sizing: border-box\\r\\n} */\\r\\n\\r\\n/* row */\\r\\n\\r\\n.custRow {\\r\\n    margin-left: 0em;\\r\\n    margin-right: 0em;\\r\\n}\"","module.exports = \"<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'pilot';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule }   from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\nimport { AppRoutingModule } from './/app-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';  \r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    DashboardComponent,\r\n    AddUserComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from './user';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DataService {\r\n    constructor(private http: HttpClient) { }\r\n    getUserList() {\r\n        //   http call\r\n        return this.http.get(\"https://pilot-project-api-gdp.herokuapp.com/api/user/getUsersList\");\r\n    }\r\n\r\n    saveUser(data: User) {\r\n        //   http call\r\n        return this.http.post(\"https://pilot-project-api-gdp.herokuapp.com/api/user/signup\", data);\r\n    }\r\n\r\n    signInUser(data: User) {\r\n        //   http call\r\n        return this.http.post(\"https://pilot-project-api-gdp.herokuapp.com/api/user/signin\", data);\r\n    }\r\n}","export class User {\n    \n    firstName: string;\n    lastName: string;\n    email: string;\n    gender: string;\n    profileImage?: string;\n    dob: string;\n    status: string;\n\n    constructor(values: Object = {}) {\n        /*Constructor initialization*/\n        Object.assign(this, values);\n    }\n}\n","module.exports = \".userTable {\\r\\n    width: 100%;\\r\\n}\"","module.exports = \"<div class=\\\"custRow row\\\">\\n    <br>\\n</div>\\n\\n<div class=\\\"custRow row\\\">\\n<div  class=\\\"col-md-4 col-xs-4 col-lg-4\\\"> \\n    <span></span>\\n</div>\\n<div class=\\\"col-md-4 col-xs-4 col-lg-4\\\" style=\\\"text-align:center;\\\">\\n    <h1> Dashboard </h1>\\n</div>\\n</div>\\n\\n<div class=\\\"custRow row\\\">\\n    <div class=\\\"col-md-3 col-xs-3 col-lg-3\\\"><span></span></div>\\n    <div class=\\\"col-md-3 col-xs-3 col-lg-3\\\" style=\\\"text-align:center;\\\">\\n        <button class=\\\"btn btn-primary\\\" routerLink=\\\"/addUser\\\"> Add </button>\\n    </div>\\n    <div class=\\\"col-md-3 col-xs-3 col-lg-3\\\" style=\\\"text-align:center;\\\">\\n        <button class=\\\"btn btn-danger\\\" routerLink=\\\"/login\\\"> Logout </button>\\n    </div>\\n</div>\\n\\n<div>\\n    <br>\\n</div>\\n\\n<div class=\\\"custRow row\\\">\\n    <div class=\\\"col-md-1 col-xs-1 col-lg-1\\\"><span></span></div>\\n        <div class=\\\"col-md-10 col-xs-10 col-lg-10 table-responsive\\\">\\n            <table class=\\\"userTable table-bordered\\\">\\n                <tr>\\n                    <th>First Name</th>\\n                    <th>Last Name</th>\\n                    <th>Email</th>\\n                    <th>Gender</th>\\n                    <th>Date of Birth</th>\\n                    <th>Status</th>\\n                </tr>\\n                <tr *ngFor=\\\"let user of users\\\">\\n                    <td> {{ user.firstName }} </td>\\n                    <td> {{ user.lastName }} </td>\\n                    <td> {{ user.email }} </td>\\n                    <td> {{ user.gender }} </td>\\n                    <td> {{ user.dob | date:'MM-dd-yyyy'}} </td>\\n                    <td> {{ user.status }} </td>\\n                </tr>\\n            </table>\\n        </div>\\n    <div class=\\\"col-md-1 col-xs-1 col-lg-1 table-responsive\\\"><span></span></div>\\n</div>  \"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../common/user'\nimport { DataService } from '../common/dataService';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['../app.component.css', './dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  users: User[];\n\n  constructor(private dataService: DataService) { }\n\n  ngOnInit() {\n    this.dataService.getUserList()\n      .subscribe((data) =>{\n        \n        this.users = data['data'];\n      });\n  }\n\n\n\n}\n\n\n","module.exports = \"/* padding for login form to make it center */\\r\\n.loginContainer {\\r\\n    padding-left: 30em;\\r\\n    padding-right: 29em;\\r\\n    padding-top: 6em;\\r\\n}\"","module.exports = \"<!-- Login form -->\\n<div class=\\\"loginContainer\\\">\\n  <h1>Login </h1>\\n  <form novalidate (ngSubmit)=\\\"onLogin(loginForm)\\\" #loginForm=\\\"ngForm\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">\\n        <b>Email</b>\\n      </label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\" id=\\\"inputEmail\\\" placeholder=\\\"Email\\\"\\n        pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required>\\n      <!-- Email error block -->\\n      <div *ngIf=\\\"(email.invalid && ( email.touched || email.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n        <div *ngIf=\\\"email.errors?.required\\\">\\n          Please enter the email id\\n        </div>\\n        <div *ngIf=\\\"email.errors?.pattern &&  email.dirty\\\">\\n            Please enter the valid email id\\n        </div>\\n      </div>\\n\\n      <!-- Password block -->\\n      <label for=\\\"password\\\">\\n        <b>Password</b>\\n      </label>\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" [ngModel]=\\\"user.password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" id=\\\"inputpassword\\\"\\n        placeholder=\\\"Password\\\" minlength=\\\"6\\\" required>\\n      <!-- password error block -->\\n      <div *ngIf=\\\"(password.invalid && ( password.touched || password.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\n        <div *ngIf=\\\"password.errors?.required\\\">\\n          Please enter the password\\n        </div>\\n        <div *ngIf=\\\"password.errors?.minlength && password.dirty\\\">\\n          Password must have mininmum 6 characters.\\n        </div>\\n      </div>\\n      </div>\\n\\n      <button class=\\\"btn btn-primary\\\"> Login </button>\\n  </form>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../common/user';\nimport { Router } from '@angular/router'\nimport { FormsModule }   from '@angular/forms';\nimport { DataService } from '../common/dataService';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['../app.component.css', './login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\n  user: User;\n\n  isSubmitted = false;\n\n  constructor(private router:Router, private dataService: DataService) { \n    this.user = new User({\n      email: ''})\n}\n\n  ngOnInit() {\n  }\n\n  onLogin({ value, valid }: { value: User, valid: boolean })  {\n    console.log(value)\n    console.log(valid)\n    this.isSubmitted = true;\n    if(value){\n      console.log(value)\n      this.dataService.signInUser(value)\n      .subscribe((data) =>{\n        console.log(data)\n        console.log(\"success\")\n        this.router.navigate(['/users'])\n      },\n      error=>{\n        console.log(\"Error Occured\")\n        alert(\"Invalid EmailId/Password\")\n      });\n\n\n\n      \n    }\n    \n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}